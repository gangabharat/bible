{"version":3,"sources":["webpack:///src/app/product/product.service.ts"],"names":["ProductService","ns","_puppiesSource","BehaviorSubject","puppies$","asObservable","getValue","puppies","next","puppy","get","_setPuppies","success","id","name","info","map","obj","filter","p"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UAQaA,e;AAWX,iCAAoBC,EAApB,EAA6C;AAAA;;AAAzB,eAAAA,EAAA,GAAAA,EAAA,CAAyB,CAT7C;AACA;AACA;;AACiB,eAAAC,cAAA,GAAiB,IAAI,kCAAAC,eAAJ,CAA+B,EAA/B,CAAjB,CAM4B,CAL7C;AAEA;;AACS,eAAAC,QAAA,GAAW,KAAKF,cAAL,CAAoBG,YAApB,EAAX;AAEsC,S,CAE/C;;;;;iBACA,eAAG;AACD,mBAAO,KAAKH,cAAL,CAAoBI,QAApB,EAAP;AACD;;;iBAEO,qBAAYC,OAAZ,EAA8B;AACpC,iBAAKL,cAAL,CAAoBM,IAApB,CAAyBD,OAAzB;AACD;;;iBAED,cAAKE,KAAL,EAAmB;AACjB,gBAAMF,OAAO,gCAAO,KAAKG,GAAL,EAAP,IAAmBD,KAAnB,EAAb;;AACA,iBAAKE,WAAL,CAAiBJ,OAAjB;AACD;;;iBAED,aAAIE,KAAJ,EAAkB;AAChB,iBAAKR,EAAL,CAAQW,OAAR,CAAgBH,KAAK,CAACI,EAAtB,uCAAuDJ,KAAK,CAACK,IAA7D;AACA,gBAAMP,OAAO,gCAAO,KAAKG,GAAL,EAAP,IAAmBD,KAAnB,EAAb;;AACA,iBAAKE,WAAL,CAAiBJ,OAAjB;AACD;;;iBAED,qBAAYE,KAAZ,EAA0B;AACxB,iBAAKR,EAAL,CAAQc,IAAR,CAAaN,KAAK,CAACI,EAAnB,yCAAsDJ,KAAK,CAACK,IAA5D;AACA,gBAAMP,OAAO,GAAG,KAAKG,GAAL,GAAWM,GAAX,CAAe,UAAAC,GAAG;AAAA,qBAAIA,GAAG,CAACJ,EAAJ,KAAWJ,KAAK,CAACI,EAAjB,GAAsBJ,KAAtB,GAA8BQ,GAAlC;AAAA,aAAlB,CAAhB;;AACA,iBAAKN,WAAL,CAAiBJ,OAAjB;AACD;;;iBAED,qBAAYE,KAAZ,EAA0B;AACxB,iBAAKR,EAAL,CAAQc,IAAR,CAAaN,KAAK,CAACI,EAAnB,yCAAsDJ,KAAK,CAACK,IAA5D;AACA,gBAAMP,OAAO,GAAG,KAAKG,GAAL,GAAWQ,MAAX,CAAkB,UAAAC,CAAC;AAAA,qBAAIA,CAAC,CAACN,EAAF,KAASJ,KAAK,CAACI,EAAnB;AAAA,aAAnB,CAAhB;;AACA,iBAAKF,WAAL,CAAiBJ,OAAjB;AACD;;;;;;;yBA3CUP,e,EAAc,qI;AAAA,O;;;eAAdA,e;AAAc,iBAAdA,eAAc,K;AAAA,oBAFb","file":"common-es5.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { NotificationService } from '../shared/notification.service';\nimport { Product } from './product.model'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProductService {\n\n  // Make _puppiesSource private so it's not accessible from the outside, \n  // expose it as puppies$ observable (read-only) instead.\n  // Write to _puppiesSource only through specified store methods below.\n  private readonly _puppiesSource = new BehaviorSubject<Product[]>([]);\n  //private readonly _puppiesSource = new BehaviorSubject<Puppy[]>([]);\n\n  // Exposed observable (read-only).\n  readonly puppies$ = this._puppiesSource.asObservable();\n\n  constructor(private ns: NotificationService) {}\n\n  // Get last value without subscribing to the puppies$ observable (synchronously).\n  get(): Product[] {    \n    return this._puppiesSource.getValue();\n  }\n\n  private _setPuppies(puppies: Product[]): void {\n    this._puppiesSource.next(puppies);\n  }\n\n  load(puppy: Product): void {\n    const puppies = [...this.get(), puppy];\n    this._setPuppies(puppies);\n  }\n\n  add(puppy: Product): void {\n    this.ns.success(puppy.id,`Successfully added product ${puppy.name}`);\n    const puppies = [...this.get(), puppy];\n    this._setPuppies(puppies);\n  }\n\n  updatePuppy(puppy: Product): void {\n    this.ns.info(puppy.id,`Successfully updated product ${puppy.name}`);        \n    const puppies = this.get().map(obj => obj.id === puppy.id ? puppy : obj);    \n    this._setPuppies(puppies);    \n  }\n\n  removePuppy(puppy: Product): void {\n    this.ns.info(puppy.id,`Successfully deleted product ${puppy.name}`);\n    const puppies = this.get().filter(p => p.id !== puppy.id);\n    this._setPuppies(puppies);\n  }\n}\n"]}