{"version":3,"sources":["webpack:///src/app/news/news-http.service.ts","webpack:///src/app/news/news-list/news-list.component.ts","webpack:///src/app/news/news-list/news-list.component.html","webpack:///src/app/news/news-routing.module.ts","webpack:///src/app/news/news-widget/news-widget.component.html","webpack:///src/app/news/news-widget/news-widget.component.ts","webpack:///src/app/news/news.component.ts","webpack:///src/app/news/news.component.html","webpack:///src/app/news/news.module.ts","webpack:///src/app/news/news.service.ts"],"names":["NewsHttpService","_http","url","get","NewsListComponent","routes","path","component","NewsComponent","NewsRoutingModule","RouterModule","NewsWidgetComponent","newsHttpService","newsService","newsList","faEye","faCheck","faExclamationTriangle","puppies$","subscribe","res","newsData","getNews","load","console","log","loadMore","NewsModule","CommonModule","FontAwesomeModule","NewsService","_puppiesSource","BehaviorSubject","asObservable","puppies","allPuppies","getValue","next","puppy","getNextPuppies","_setPuppies","map","obj","Title","filter","p","length","remainingLength","Math","min","push","slice"],"mappings":"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","file":"src_app_news_news_module_ts-es5.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClientService } from '../shared/http-client.service';\nimport { News } from './news.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NewsHttpService {\n\n  url : string = \"https://haveibeenpwned.com/api/v2/breaches\";\n  constructor(private _http: HttpClientService) { }\n\n  getNews(){\n    return this._http.get<News[]>({url:this.url});\n  }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-news-list',\n  templateUrl: './news-list.component.html',\n  styleUrls: ['./news-list.component.css']\n})\nexport class NewsListComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>news-list works!</p>\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { NewsComponent } from './news.component';\n\nconst routes: Routes = [{ path: '', component: NewsComponent }];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class NewsRoutingModule { }\n","<!-- <ol class=\"list-group list-group-numbered\">\n  <li\n    *ngFor=\"let news of newsList; index as i\"\n    class=\"list-group-item d-flex justify-content-between align-items-start\"\n  >\n    <div>\n      <div class=\"\">{{ news.Title }}</div>\n    </div>\n    <div class=\"\">\n        {{news.DataClasses | json}}\n    </div>   \n  </li>\n</ol> -->\n\n<!-- AddedDate: \"2015-10-26T23:35:45Z\"\nBreachDate: \"2015-03-01\"\nDataClasses: (4) ['Email addresses', 'IP addresses', 'Names', 'Passwords']\nDescription: \"In approximately March 2015, the free web hosting provider <a href=\\\"http://www.troyhunt.com/2015/10/breaches-traders-plain-text-passwords.html\\\" target=\\\"_blank\\\" rel=\\\"noopener\\\">000webhost suffered a major data breach</a> that exposed almost 15 million customer records. The data was sold and traded before 000webhost was alerted in October. The breach included names, email addresses and plain text passwords.\"\nDomain: \"000webhost.com\"\nIsFabricated: false\nIsRetired: false\nIsSensitive: false\nIsSpamList: false\nIsVerified: true\nLogoPath: \"https://haveibeenpwned.com/Content/Images/PwnedLogos/000webhost.png\"\nModifiedDate: \"2017-12-10T21:44:27Z\"\nName: \"000webhost\"\nPwnCount: 14936670\nTitle: \"000webhost\" -->\n<div class=\"\"></div>\n\n<!-- <ul class=\"list-group\">\n  <li *ngFor=\"let news of newsList; index as i\" class=\"list-group-item\">\n    <div class=\"\"></div>\n    <div class=\"img-thumbnail\" style=\"max-width: 200px\">\n      <img class=\"\" [src]=\"news.LogoPath\" />\n    </div>\n    <div class=\"\" [innerHTML]=\"news.Description\"></div>\n    <div class=\"\" *ngFor=\"let DataClass of news.DataClasses\">\n      <div class=\"badge badge-info\">{{ DataClass }}</div>\n    </div>\n  </li>\n</ul> -->\n\n<!-- <div class=\"container\">\n  <div class=\"list-group\">\n    <div class=\"row\" *ngFor=\"let news of newsList; index as i\">     \n      <div class=\"col-md-12\">\n        <a\n          href=\"#\"\n          class=\"\n            list-group-item list-group-item-action\n            flex-column\n            align-items-start\n          \"\n        >\n          <div class=\"d-flex w-100 justify-content-between\">\n            <h5 class=\"mb-1\">{{ news.Title }}</h5>\n            \n            <span class=\"badge bg-warning\">{{ news.PwnCount }}</span>\n          </div>\n          <div class=\"mb-1\" [innerHtml]=\"news.Description\"></div>\n          <div class=\"\">\n            {{ news.AddedDate | date: \"medium\" }}\n          </div>\n          <small\n            *ngFor=\"let DataClass of news.DataClasses\"\n            class=\"badge badge-pill badge-success\"\n            >{{ DataClass }}</small\n          >\n          <div class=\"text-success\">            \n            <fa-icon [icon]=\"faCheck\" [hidden]=\"IsVerified\"></fa-icon>            \n          </div>\n          \n        </a>\n      </div>\n    </div>\n  </div>\n</div> -->\n<!-- \n<div class=\"card-columns\">\n  <div class=\"card\" *ngFor=\"let news of newsList; index as i\">    \n    <div class=\"card-body\">\n      <h5 class=\"card-title text-primary\">\n        {{ news.Title }}\n        <fa-icon [icon]=\"faCheck\" class=\"text-success\"  [hidden]=\"IsVerified\"></fa-icon>\n        <fa-icon [icon]=\"faExclamationTriangle\" class=\"text-danger\"  [hidden]=\"IsSpamList\"></fa-icon>\n        <span class=\"badge badge-primary badge-pill\">{{ news.PwnCount }}</span>\n      </h5>\n      <p class=\"card-text\" [innerHtml]=\"news.Description\"></p>\n      <p class=\"card-text\">\n        <small class=\"text-muted\">{{ news.Domain }}</small>\n      </p>\n      <small\n        *ngFor=\"let DataClass of news.DataClasses\"\n        class=\"badge badge-pill badge-warning\"\n        >{{ DataClass }}</small\n      >   \n    </div>\n  </div>\n</div> -->\n<!-- \n<div class=\"row\">\n<div class=\"col-md\"  *ngFor=\"let news of newsList; index as i\">\n<div class=\"card\">\n  <h5 class=\"card-header\"> {{ news.Title }}</h5>\n  <div class=\"card-body\">\n    <h5 class=\"card-title text-primary\">\n      {{ news.Title }}\n      <fa-icon [icon]=\"faCheck\" class=\"text-success\"  [hidden]=\"IsVerified\"></fa-icon>\n      <fa-icon [icon]=\"faExclamationTriangle\" class=\"text-danger\"  [hidden]=\"IsSpamList\"></fa-icon>\n      <span class=\"badge badge-primary badge-pill\">{{ news.PwnCount }}</span>\n    </h5>    \n    <p class=\"card-text\" innerHtml=\"{{news.Description.substr(0,100)}}\"></p>\n    <p class=\"card-text\">\n      <small class=\"text-muted\">{{ news.Domain }}</small>\n    </p>\n    <small\n      *ngFor=\"let DataClass of news.DataClasses\"\n      class=\"badge badge-pill badge-warning\"\n      >{{ DataClass }}</small\n    >   \n  </div>\n</div>\n</div>\n</div> -->\n<div class=\"row\">\n<div class=\"card-shadow card mb-1\"  *ngFor=\"let news of newsList; index as i\">\n  <div class=\"row g-0\">\n    <div class=\"col-md-4\">\n      <img  [src]=\"news.LogoPath\"  class=\"img-fluid rounded-start\" alt=\"not found\">\n    </div>\n    <div class=\"col-md-8\">\n      <div class=\"card-body\">\n        <h5 class=\"card-title\">{{ news.Title }}</h5>        \n        <p class=\"card-text\" innerHtml=\"{{news.Description}}\"></p>\n        <p class=\"card-text\"><small class=\"text-muted\">Last updated 3 mins ago</small></p>\n      </div>\n    </div>\n  </div>\n</div>\n</div>\n","import { Component, OnInit, ViewEncapsulation } from \"@angular/core\";\nimport { Observable } from \"rxjs\";\nimport { NewsHttpService } from \"../news-http.service\";\nimport { News } from \"../news.model\";\nimport { NewsService } from \"../news.service\";\nimport {\n  faEye,\n  faCheck,\n  faExclamationTriangle,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { map } from \"rxjs/operators\";\n\n@Component({\n  //encapsulation : ViewEncapsulation.None,\n  selector: \"app-news-widget\",\n  templateUrl: \"./news-widget.component.html\",\n  styleUrls: [\"./news-widget.component.css\"],\n})\nexport class NewsWidgetComponent implements OnInit {\n  //public newsList$ = new Observable<News[]>();\n  newsList: News[] = [];\n\n  faEye = faEye;\n  faCheck = faCheck;\n  faExclamationTriangle = faExclamationTriangle;\n\n  constructor(\n    private newsHttpService: NewsHttpService,\n    private newsService: NewsService\n  ) {}\n\n  ngOnInit(): void {\n\n    this.newsService.puppies$.subscribe(\n      res =>{\n        this.newsList = res;\n      }\n    );\n\n    // let s = 'ser';\n    // s.substr(0,10);\n    //  this.newsHttpService.getNews()\n    //  .pipe(map(\n    //    newval => {\n    //      return newval.map(newsone =>{\n    //        if(newsone.Description.length > 500){\n    //          newsone.Description = newsone.Description.substr(0,500) + '...';\n    //        }\n    //       return newsone;\n    //      } )\n    //    }\n    //  ))\n    //  .subscribe(\n    //   (res) =>{\n    //       this.newsList = res;\n    //       //this.newsService.load(res);\n    //   },\n    //   (error) =>{\n    //   }\n    // );\n  }\n}","import { Component, OnInit } from \"@angular/core\";\nimport { NewsHttpService } from \"./news-http.service\";\nimport { News } from \"./news.model\";\nimport { NewsService } from \"./news.service\";\n\n@Component({\n  selector: \"app-news\",\n  templateUrl: \"./news.component.html\",\n  styleUrls: [\"./news.component.css\"],\n})\nexport class NewsComponent implements OnInit {\n  newsData: News[] = [];\n  constructor(\n    private newsHttpService: NewsHttpService,\n    private newsService: NewsService\n  ) {}\n\n  ngOnInit(): void {\n    this.newsHttpService.getNews().subscribe((res) => {\n      this.newsService.load(res);\n    });\n\n    this.newsService.puppies$.subscribe((res) => {\n      console.log(res);\n    });    \n  }\n\n  loadMore() {\n    this.newsService.loadMore();    \n  }\n}\n","<app-news-widget></app-news-widget>\r\n<button (click)=\"loadMore()\" class=\"btn btn-primary\">Load More...</button>","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { NewsRoutingModule } from './news-routing.module';\nimport { NewsComponent } from './news.component';\nimport { NewsListComponent } from './news-list/news-list.component';\nimport { NewsWidgetComponent } from './news-widget/news-widget.component';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\n\n\n@NgModule({\n  declarations: [NewsComponent, NewsListComponent, NewsWidgetComponent],\n  imports: [\n    CommonModule,\n    NewsRoutingModule,\n    FontAwesomeModule\n  ]\n})\nexport class NewsModule { }\n","import { Injectable } from \"@angular/core\";\nimport { BehaviorSubject } from \"rxjs\";\nimport { News } from \"./news.model\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class NewsService {\n  \n  // Make _puppiesSource private so it's not accessible from the outside,\n  // expose it as puppies$ observable (read-only) instead.\n  // Write to _puppiesSource only through specified store methods below.\n  private readonly _puppiesSource = new BehaviorSubject<News[]>([]);\n  //private readonly _puppiesSource = new BehaviorSubject<Puppy[]>([]);\n\n  // Exposed observable (read-only).\n  readonly puppies$ = this._puppiesSource.asObservable();\n\n  private puppies: News[] = [];\n  private allPuppies: News[] = [];\n\n  constructor() {}\n\n  // Get last value without subscribing to the puppies$ observable (synchronously).\n  get(): News[] {\n    return this._puppiesSource.getValue();\n  }\n\n  private _setPuppies(puppies: News[]): void {\n    this._puppiesSource.next(puppies);\n  }\n\n  load(puppy: News[]): void {\n    this.allPuppies = puppy;\n  }\n\n  loadMore() {\n    if (this.getNextPuppies()) {\n      this._setPuppies(this.puppies);\n    }\n  }\n\n  add(puppy: News): void {\n    const puppies = [...this.get(), puppy];\n    this._setPuppies(puppies);\n  }\n\n  updatePuppy(puppy: News): void {\n    const puppies = this.get().map((obj) =>\n      obj.Title === puppy.Title ? puppy : obj\n    );\n    this._setPuppies(puppies);\n  }\n\n  removePuppy(puppy: News): void {\n    const puppies = this.get().filter((p) => p.Title !== puppy.Title);\n    this._setPuppies(puppies);\n  }\n\n  private getNextPuppies(): boolean {\n    if (this.puppies.length >= this.allPuppies.length) {\n      return false;\n    }\n    const remainingLength = Math.min(\n      5,\n      this.allPuppies.length - this.puppies.length\n    );\n    this.puppies.push(\n      ...this.allPuppies.slice(\n        this.puppies.length,\n        this.puppies.length + remainingLength\n      )\n    );\n    return true;\n  }\n}\n"]}