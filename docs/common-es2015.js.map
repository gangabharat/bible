{"version":3,"sources":["./src/app/product/product.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;AACuC;;;AAOhC,MAAM,cAAc;IAWzB,YAAoB,EAAuB;QAAvB,OAAE,GAAF,EAAE,CAAqB;QAT3C,wEAAwE;QACxE,wDAAwD;QACxD,sEAAsE;QACrD,mBAAc,GAAG,IAAI,iDAAe,CAAY,EAAE,CAAC,CAAC;QACrE,qEAAqE;QAErE,kCAAkC;QACzB,aAAQ,GAAG,IAAI,CAAC,cAAc,CAAC,YAAY,EAAE,CAAC;IAET,CAAC;IAE/C,iFAAiF;IACjF,GAAG;QACD,OAAO,IAAI,CAAC,cAAc,CAAC,QAAQ,EAAE,CAAC;IACxC,CAAC;IAEO,WAAW,CAAC,OAAkB;QACpC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACpC,CAAC;IAED,IAAI,CAAC,KAAc;QACjB,MAAM,OAAO,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,EAAE,EAAE,KAAK,CAAC,CAAC;QACvC,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;IAC5B,CAAC;IAED,GAAG,CAAC,KAAc;QAChB,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,EAAC,8BAA8B,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC;QACrE,MAAM,OAAO,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,EAAE,EAAE,KAAK,CAAC,CAAC;QACvC,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;IAC5B,CAAC;IAED,WAAW,CAAC,KAAc;QACxB,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,EAAC,gCAAgC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC;QACpE,MAAM,OAAO,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,KAAK,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;QACzE,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;IAC5B,CAAC;IAED,WAAW,CAAC,KAAc;QACxB,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,EAAC,gCAAgC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC;QACpE,MAAM,OAAO,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,KAAK,KAAK,CAAC,EAAE,CAAC,CAAC;QAC1D,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;IAC5B,CAAC;;4EA3CU,cAAc;+GAAd,cAAc,WAAd,cAAc,mBAFb,MAAM","file":"common-es2015.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { NotificationService } from '../shared/notification.service';\nimport { Product } from './product.model'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProductService {\n\n  // Make _puppiesSource private so it's not accessible from the outside, \n  // expose it as puppies$ observable (read-only) instead.\n  // Write to _puppiesSource only through specified store methods below.\n  private readonly _puppiesSource = new BehaviorSubject<Product[]>([]);\n  //private readonly _puppiesSource = new BehaviorSubject<Puppy[]>([]);\n\n  // Exposed observable (read-only).\n  readonly puppies$ = this._puppiesSource.asObservable();\n\n  constructor(private ns: NotificationService) {}\n\n  // Get last value without subscribing to the puppies$ observable (synchronously).\n  get(): Product[] {    \n    return this._puppiesSource.getValue();\n  }\n\n  private _setPuppies(puppies: Product[]): void {\n    this._puppiesSource.next(puppies);\n  }\n\n  load(puppy: Product): void {\n    const puppies = [...this.get(), puppy];\n    this._setPuppies(puppies);\n  }\n\n  add(puppy: Product): void {\n    this.ns.success(puppy.id,`Successfully added product ${puppy.name}`);\n    const puppies = [...this.get(), puppy];\n    this._setPuppies(puppies);\n  }\n\n  updatePuppy(puppy: Product): void {\n    this.ns.info(puppy.id,`Successfully updated product ${puppy.name}`);        \n    const puppies = this.get().map(obj => obj.id === puppy.id ? puppy : obj);    \n    this._setPuppies(puppies);    \n  }\n\n  removePuppy(puppy: Product): void {\n    this.ns.info(puppy.id,`Successfully deleted product ${puppy.name}`);\n    const puppies = this.get().filter(p => p.id !== puppy.id);\n    this._setPuppies(puppies);\n  }\n}\n"],"sourceRoot":"webpack:///"}